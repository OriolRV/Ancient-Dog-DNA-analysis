#!/bin/bash -x
#
#SBATCH --job-name="pca"
#SBATCH --account=lbotigue_V6435
#SBATCH --partition=fatnodes
#SBATCH --nodelist=hopper
#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --tasks-per-node=1
#SBATCH --cpus-per-task=4
#SBATCH --mem-per-cpu=200G
#SBATCH --mail-type=END
#SBATCH --mail-user=oriol.rocabert@cragenomica.es
#SBATCH --output=/scratch/124-dogs/pca/%j.out
#SBATCH --error=/scratch/124-dogs/pca/%j.err
#

#############################################################################
#The objective of this script is to prepare and perform a PCA.		    	#
#It has to be executed using slurm because it is computationally expensive. #
#It is launched as: sbatch pca.sub					    					#
#############################################################################

#Some paths are set.
SCRATCH=/scratch/124-dogs
HOME=/home/orocabert

#First of all, indexes are created for both files that will be used. With them, SNPs are extracted from the VCF files since are the only variation needed for the pca.
#Also, because this files will be treated by bcftools, they are bgzip compressed.
module load gatk/4.1.6
module load samtools/1.9
	echo "##Indexing 722 vcf file."
#The -I option receives the input file.
	gatk IndexFeatureFile -I $SCRATCH/variants/722g.990.SNP.INDEL.chrAll.vcf.gz
	echo "##Extracting SNPs from 722 vcf file."
#The -V option receives the input file, only SNPs are selected and -O sets the output path. Then the files are bgzip compressed.
	gatk SelectVariants -V $SCRATCH/variants/722g.990.SNP.INDEL.chrAll.vcf.gz --select-type-to-include SNP -O $SCRATCH/pca/modern_samples_snp.vcf
	echo "##Compressing SNPs from 722 vcf file."
#bgzip is followed by the file that will be compressed.
	bgzip $SCRATCH/pca/modern_samples_snp.vcf
	echo "##Indexing ancient vcf file."
	gatk IndexFeatureFile -I $SCRATCH/vcf/ancient_samples.vcf.gz
	echo "##Extracting SNPs from ancient samples vcf file."
	gatk SelectVariants -V $SCRATCH/vcf/ancient_samples.vcf.gz --select-type-to-include SNP -O $SCRATCH/pca/ancient_samples_snp.vcf
	echo "##Compressing SNPs from ancient samples vcf file."
	bgzip $SCRATCH/pca/ancient_samples_snp.vcf
module unload gatk/4.1.6
module load samtools/1.9

#Secondly, the files are indexed, the snps with modern dog data are subset, the invariant sites removed, the ancient snps present in model samples are selected and then merged with the ancient samples (indexing again).
module load conda/2-4.3.21
	source activate bcftools-uri
	echo "##Indexing SNP files."
#The index option is followed by the file to be indexed.
	bcftools index $SCRATCH/pca/modern_samples_snp.vcf.gz
	bcftools index $SCRATCH/pca/ancient_samples_snp.vcf.gz
	echo "##Subseting dog SNPs."
#The -O option sets the output file type, -S receives the list of samples to be subset and -o sets the output path.
	bcftools view -O z -S $HOME/supplementary_files/dogs_id.txt -o $SCRATCH/pca/dogs_snp.vcf.gz $SCRATCH/pca/modern_samples_snp.vcf.gz
	echo "##Subseting dog and wolf SNPs."
	bcftools view -O z -S $HOME/supplementary_files/dogs_wolfs_id.txt -o $SCRATCH/pca/dogs_wolfs_snp.vcf.gz $SCRATCH/pca/modern_samples_snp.vcf.gz
#The -O option sets the output file type, -c indicates the minor allele count, -S receives the list of samples to be subset and -o sets the output path.
	echo "##Removing dog invariant sites."
	bcftools view -o $SCRATCH/pca/dogs_snp_clean.vcf.gz -O z -e 'COUNT(GT="mis")=N_SAMPLES || COUNT(GT="AA")=N_SAMPLES || COUNT(GT="RR")=N_SAMPLES || COUNT(GT="AR")=N_SAMPLES || COUNT(GT="RA")=N_SAMPLES' $SCRATCH/pca/dogs_snp.vcf.gz
	echo "##Removing dog and wolf invariant sites."
	bcftools view -o $SCRATCH/pca/dogs_wolfs_snp_clean.vcf.gz -O z -e 'COUNT(GT="mis")=N_SAMPLES || COUNT(GT="AA")=N_SAMPLES || COUNT(GT="RR")=N_SAMPLES || COUNT(GT="AR")=N_SAMPLES || COUNT(GT="RA")=N_SAMPLES' $SCRATCH/pca/dogs_wolfs_snp.vcf.gz
	echo "##Calculating dog modern/ancient intersection."
	bcftools index $SCRATCH/pca/dogs_snp_clean.vcf.gz
	bcftools index $SCRATCH/pca/dogs_wolfs_snp_clean.vcf.gz
#The -p option indcate the output directory for all th files, -O sets the output format and then come the inout files.	
	bcftools isec -p $SCRATCH/pca/dogs_isec -O z $SCRATCH/pca/dogs_snp_clean.vcf.gz $SCRATCH/pca/ancient_samples_snp.vcf.gz
	echo "##Calculating dog and wolf modern/ancient intersection."
	bcftools isec -p $SCRATCH/pca/dogs_wolfs_isec -O z $SCRATCH/pca/dogs_wolfs_snp_clean.vcf.gz $SCRATCH/pca/ancient_samples_snp.vcf.gz
	echo "##Merging dog samples and ancient samples."
#The -O sets the output file type and -o sets the output path.
	bcftools merge -O z -o $SCRATCH/pca/ads.vcf.gz $SCRATCH/pca/dogs_isec/0003.vcf.gz $SCRATCH/pca/dogs_snp_clean.vcf.gz
	echo "##Merging dog-wolf samples and ancient samples."
	bcftools merge -O z -o $SCRATCH/pca/adws.vcf.gz $SCRATCH/pca/dogs_wolfs_isec/0003.vcf.gz $SCRATCH/pca/dogs_wolfs_snp_clean.vcf.gz	
	source deactivate bcftools-uri
module unload conda/2-4.3.21

module load conda/2-4.3.21
#Then, plink, is used to convert the vcf files into the needed files.
	source activate plink-uri
	echo "##Starting creation of .ped and .map files."
#The --vcf option receives the input file, --dog tells that there are 38 chromosomes, --recode will produce the ped file and --out sets the output name.
	echo "##For ads.vcf.gz."
	plink --vcf $SCRATCH/pca/ads.vcf.gz --dog --double-id --recode --out $SCRATCH/pca/ads
	echo "##For adws.vcf.gz."
	plink --vcf $SCRATCH/pca/adws.vcf.gz --dog --double-id --recode --out $SCRATCH/pca/adws
	source deactivate plink-uri
	echo "##Finished creation of .ped and .map files."
module unload conda/2-4.3.21

module load conda/2-4.3.21
#Then, some individual and family ID are changed again with plink eigensoft cannot work with individualID+familyID+1>39 characters.
echo "##Starting ID reduction."
	source activate plink-uri
		plink --file ads --dog --update-ids newid.txt --recode --out newads
		plink --file adws --dog --update-ids newid.txt --recode --out newadws
	source deactivate plink-uri
module unload conda/2-4.3.21
echo "##Finished ID reduction."

#After this, fake rsid are added to the map files. Also, the extension is changed.
echo "##Starting the addition of fake rsid."
cat $SCRATCH/pca/newads.map | awk '$2=NR+20000000' OFS="\t" > $SCRATCH/pca/modads.map
cat $SCRATCH/pca/modads.map | awk '{ $2="rs" $2 }1' OFS="\t" > $SCRATCH/pca/newads.pedsnp
rm $SCRATCH/pca/newads.map $SCRATCH/pca/modads.map
cat $SCRATCH/pca/newadws.map | awk '$2=NR+20000000' OFS="\t" > $SCRATCH/pca/modadws.map
cat $SCRATCH/pca/modadws.map | awk '{ $2="rs" $2 }1' OFS="\t" > $SCRATCH/pca/newadws.pedsnp
rm newadws.map modadws.map
echo "##Finished the addition of fake rsid."

#Next, The population information is incorporated into the ped file. Right now, this step is time consuming.
echo "##Starting the addition of the population information."
rm $SCRATCH/pca/tmpads.ped
IFS=$'\n'
for LINE in $(cat < $HOME/supplementary_files/pop_spc_mod.txt)
do
	ID=$( ( echo $LINE | cut -f 1 ) )
	POP=$( ( echo $LINE | cut -f 2 ) )
	grep -m 1 "\<$ID\>" $SCRATCH/pca/newads.ped | sed "s/-9/$POP/" >> $SCRATCH/pca/tmpads.ped
	unset $POP
done
mv $SCRATCH/pca/newads.ped $SCRATCH/pca/olditod.ped
mv $SCRATCH/pca/tmpads.ped $SCRATCH/pca/newads.ped
rm $SCRATCH/pca/tmpadws.ped
IFS=$'\n'
for LINE in $(cat < $HOME/supplementary_files/pop_spc_mod.txt)
do
	ID=$( ( echo $LINE | cut -f 1 ) )
	POP=$( ( echo $LINE | cut -f 2 ) )
	grep -m 1 "\<$ID\>" $SCRATCH/pca/newadws.ped | sed "s/-9/$POP/" >> $SCRATCH/pca/tmpadws.ped
	unset $POP
done
mv $SCRATCH/pca/newadws.ped $SCRATCH/pca/olditow.ped
mv $SCRATCH/pca/tmpadws.ped $SCRATCH/pca/newadws.ped
echo "##Finished the addition of the population information."

echo "##Starting the creation of the ind file."
#The last file necessary for the pca is created.
cut -d" " -f1-6 $SCRATCH/pca/newads.ped > $SCRATCH/pca/newads.pedind
cut -d" " -f1-6 $SCRATCH/pca/newadws.ped > $SCRATCH/pca/newadws.pedind
echo "##Finished the creation of the ind file."

module load conda/2-4.3.21
#Next, using eigensoft, the eigenvectors and eigenvalues are created.
	echo "##Starting calculation of eigenvectors and eigenvalues."
	source activate eigensoft-uri
	#The -p option receives the parameter file where all the other options are stated.
	echo "##For ads files."
	smartpca -p $HOME/supplementary_files/ads.par > $SCRATCH/pca/newads_pca.log
	echo "##For adws files."
        smartpca -p $HOME/supplementary_files/adws.par > $SCRATCH/pca/newadws_pca.log
	echo "##Finished calculation of eigenvectors and eigenvalues."
	source deactivate eigensoft-uri
module unload conda/2-4.3.21

#Finally, using R from the OC, the results of the PCA were plotted.